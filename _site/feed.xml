<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Always hungry to keep learning.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Apr 2019 15:10:42 +0800</pubDate>
    <lastBuildDate>Thu, 04 Apr 2019 15:10:42 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Vue router basic concepts</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#功能列表&quot; id=&quot;markdown-toc-功能列表&quot;&gt;功能列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#动态路由匹配&quot; id=&quot;markdown-toc-动态路由匹配&quot;&gt;动态路由匹配&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#嵌套路由&quot; id=&quot;markdown-toc-嵌套路由&quot;&gt;嵌套路由&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#编程式的导航&quot; id=&quot;markdown-toc-编程式的导航&quot;&gt;编程式的导航&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#routergon&quot; id=&quot;markdown-toc-routergon&quot;&gt;router.go(n)&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#routerreplacelocation-oncomplete-onabort&quot; id=&quot;markdown-toc-routerreplacelocation-oncomplete-onabort&quot;&gt;router.replace(location, onComplete?, onAbort?)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#命名路由&quot; id=&quot;markdown-toc-命名路由&quot;&gt;命名路由&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#命名视图&quot; id=&quot;markdown-toc-命名视图&quot;&gt;命名视图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#重定向和别名&quot; id=&quot;markdown-toc-重定向和别名&quot;&gt;重定向和别名&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#别名&quot; id=&quot;markdown-toc-别名&quot;&gt;别名&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;功能列表&quot;&gt;功能列表&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;嵌套的路由/视图表&lt;/li&gt;
  &lt;li&gt;模块化的、基于组件的路由配置&lt;/li&gt;
  &lt;li&gt;路由参数、查询、通配符&lt;/li&gt;
  &lt;li&gt;基于 Vue.js 过渡系统的视图过渡效果&lt;/li&gt;
  &lt;li&gt;细粒度的导航控制&lt;/li&gt;
  &lt;li&gt;带有自动激活的 CSS class 的链接&lt;/li&gt;
  &lt;li&gt;HTML5 历史模式或 hash 模式，在 IE9 中自动降级&lt;/li&gt;
  &lt;li&gt;自定义的滚动条行为&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&quot;app&quot;&amp;gt;
  &amp;lt;h1&amp;gt;Hello App!&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;!-- 使用 router-link 组件来导航. --&amp;gt;
    &amp;lt;!-- 通过传入 `to` 属性指定链接. --&amp;gt;
    &amp;lt;!-- &amp;lt;router-link&amp;gt; 默认会被渲染成一个 `&amp;lt;a&amp;gt;` 标签 --&amp;gt;
    &amp;lt;router-link to=&quot;/foo&quot;&amp;gt;Go to Foo&amp;lt;/router-link&amp;gt;
    &amp;lt;router-link to=&quot;/bar&quot;&amp;gt;Go to Bar&amp;lt;/router-link&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;!-- 路由出口 --&amp;gt;
  &amp;lt;!-- 路由匹配到的组件将渲染在这里 --&amp;gt;
  &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;动态路由匹配&quot;&gt;动态路由匹配&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const User = {
  template: '&amp;lt;div&amp;gt;User&amp;lt;/div&amp;gt;'
}

const router = new VueRouter({
  routes: [
    // 动态路径参数 以冒号开头
    { path: '/user/:id', component: User }
  ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const User = {
  template: '&amp;lt;div&amp;gt;User &amp;lt;/div&amp;gt;'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;嵌套路由&quot;&gt;嵌套路由&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User,
      children: [
        {
          // 当 /user/:id/profile 匹配成功，
          // UserProfile 会被渲染在 User 的 &amp;lt;router-view&amp;gt; 中
          path: 'profile',
          component: UserProfile
        },
        {
          // 当 /user/:id/posts 匹配成功
          // UserPosts 会被渲染在 User 的 &amp;lt;router-view&amp;gt; 中
          path: 'posts',
          component: UserPosts
        }
      ]
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;编程式的导航&quot;&gt;编程式的导航&lt;/h2&gt;
&lt;p&gt;在 Vue 实例内部，你可以通过 $router 访问路由实例。因此你可以调用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 字符串
router.push('home')

// 对象
router.push({ path: 'home' })

// 命名的路由
router.push({ name: 'user', params: { userId: '123' }})

// 带查询参数，变成 /register?plan=private
router.push({ path: 'register', query: { plan: 'private' }})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;routergon&quot;&gt;router.go(n)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 在浏览器记录中前进一步，等同于 history.forward()
router.go(1)

// 后退一步记录，等同于 history.back()
router.go(-1)

// 前进 3 步记录
router.go(3)

// 如果 history 记录不够用，那就默默地失败呗
router.go(-100)
router.go(100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;routerreplacelocation-oncomplete-onabort&quot;&gt;router.replace(location, onComplete?, onAbort?)&lt;/h5&gt;

&lt;h2 id=&quot;命名路由&quot;&gt;命名路由&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const router = new VueRouter({
  routes: [
    {
      path: '/user/:userId',
      name: 'user',
      component: User
    }
  ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;router-link :to=&quot;{ name: 'user', params: { userId: 123 }}&quot;&amp;gt;User&amp;lt;/router-link&amp;gt;
router.push({ name: 'user', params: { userId: 123 }})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;命名视图&quot;&gt;命名视图&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;重定向和别名&quot;&gt;重定向和别名&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const router = new VueRouter({
  routes: [
    { path: '/a', redirect: { name: 'foo' }}
  ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;别名&quot;&gt;别名&lt;/h4&gt;

&lt;p&gt;/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Apr 2019 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/04/Vue-router-concepts/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/04/Vue-router-concepts/</guid>
        
        <category>Vue</category>
        
        <category>router</category>
        
        
        <category>Vue</category>
        
      </item>
    
      <item>
        <title>Sass basic concepts</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#概述&quot; id=&quot;markdown-toc-概述&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#编译方法&quot; id=&quot;markdown-toc-编译方法&quot;&gt;编译方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基本用法&quot; id=&quot;markdown-toc-基本用法&quot;&gt;基本用法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1变量&quot; id=&quot;markdown-toc-1变量&quot;&gt;1.变量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2嵌套&quot; id=&quot;markdown-toc-2嵌套&quot;&gt;2.嵌套&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3代码重用之继承&quot; id=&quot;markdown-toc-3代码重用之继承&quot;&gt;3.代码重用之继承&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4代码重用之mixin混合器&quot; id=&quot;markdown-toc-4代码重用之mixin混合器&quot;&gt;4.代码重用之Mixin混合器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5颜色函数&quot; id=&quot;markdown-toc-5颜色函数&quot;&gt;5.颜色函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6import-引入&quot; id=&quot;markdown-toc-6import-引入&quot;&gt;6.import 引入&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;概述&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;Sass的学名叫“CSS预处理器”，就是在CSS的基础上，引入了变量、嵌套、mixin（混合）、运算以及函数等功能，增加了代码的灵活性，可以让我们以更少的代码实现同样的效果，而且代码的整洁度、可读性更强&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Sass有两种后缀名文件：.sass和.scss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;编译方法&quot;&gt;编译方法&lt;/h3&gt;
&lt;p&gt;Sass编译方式大概有三种：通过命令行编译（基础方法）、GUI可视化图形同居编译及自动化编译。&lt;/p&gt;

&lt;h2 id=&quot;基本用法&quot;&gt;基本用法&lt;/h2&gt;
&lt;h4 id=&quot;1变量&quot;&gt;1.变量&lt;/h4&gt;

&lt;p&gt;通过 $ 符号来定义，通过变量名称实现多处重复引用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$box-color: red;        //定义变量
ul{
    color: $box-color;      //引用
}
li{
    background-color: $box-color;       //引用
}
    
//编译后
ul {
  color: red;
}
li {
  background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2嵌套&quot;&gt;2.嵌套&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;选择性嵌套&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div {
    h1 {
        color: #333;
    }
    p {
        margin-bottom: 1.4px;
        a {
            color: #999;
        }
    }
}
    
 /* 编译后 */
div h1 { color: #333; }
div p { margin-bottom: 1.4px; }
div p a { color: #999; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;嵌套属性&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;div {
    border: {
      style: solid;
      width: 1px;
      color: #ccc;
    }
}
    
//编译后
div {
  border-style: solid;
  border-width: 1px;
  border-color: #ccc;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3代码重用之继承&quot;&gt;3.代码重用之继承&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.class1 {
    border: 1px solid #333;
}
    
.class2 {
    @extend .class1;
    background-color: #999;
}
    
//编译后
.class1, .class2 {
  border: 1px solid #333;
}
    
.class2 {
  background-color: #999;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4代码重用之mixin混合器&quot;&gt;4.代码重用之Mixin混合器&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@mixin mixName {        
    float: left;
    margin-left: 10px;
}
    
div {
    @include mixName;
}
    
//编译后：
div {
  float: left;
  margin-left: 10px;
}
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5颜色函数&quot;&gt;5.颜色函数&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$box-color: red;        
ul {
    color: $box-color;      
}
li {
    background-color: darken($box-color,30%);       
}
    
//编译后：
ul {
  color: red;
}
li {
  background-color: #660000;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;其他颜色函数

lighten(#cc3, 10%) // #d6d65c
grayscale(#cc3) // #808080
complement(#cc3) // #33c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;6import-引入&quot;&gt;6.import 引入&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@import ‘partial’       //导入名为“_partial.scss”的文件
@import ‘toolbar.css’       //导入名为“toolbar.css”的文件
* {
    margin: 0;
    padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 02 Apr 2019 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/02/Sass-basic-concepts/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/02/Sass-basic-concepts/</guid>
        
        <category>Sass</category>
        
        <category>Css</category>
        
        
        <category>Css</category>
        
      </item>
    
      <item>
        <title>Vuex basic concepts</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#需调用-vueusevuex&quot; id=&quot;markdown-toc-需调用-vueusevuex&quot;&gt;需调用 Vue.use(Vuex)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#state&quot; id=&quot;markdown-toc-state&quot;&gt;State&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mapstate-辅助函数&quot; id=&quot;markdown-toc-mapstate-辅助函数&quot;&gt;mapState 辅助函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getter&quot; id=&quot;markdown-toc-getter&quot;&gt;Getter&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mapgetters附属函数&quot; id=&quot;markdown-toc-mapgetters附属函数&quot;&gt;mapGetters附属函数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mutation&quot; id=&quot;markdown-toc-mutation&quot;&gt;Mutation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#action&quot; id=&quot;markdown-toc-action&quot;&gt;Action&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#module&quot; id=&quot;markdown-toc-module&quot;&gt;Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;需调用-vueusevuex&quot;&gt;需调用 Vue.use(Vuex)&lt;/h3&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;
&lt;p&gt;Vuex使用使用单一状态树，用一个对象就包含了全部的应用层级状态&lt;/p&gt;

&lt;h2 id=&quot;mapstate-辅助函数&quot;&gt;mapState 辅助函数&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 在单独构建的版本中辅助函数为 Vuex.mapState
import { mapState } from 'vuex'

export default {
  // ...
  computed: mapState({
    // 箭头函数可使代码更简练
    count: state =&amp;gt; state.count,

    // 传字符串参数 'count' 等同于 `state =&amp;gt; state.count`
    countAlias: 'count',

    // 为了能够使用 `this` 获取局部状态，必须使用常规函数
    countPlusLocalState (state) {
      return state.count + this.localCount
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;getter&quot;&gt;Getter&lt;/h2&gt;

&lt;p&gt;可以使用state，store.getters.*作为参数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const store = new Vuex.Store({
  state: {
    todos: [
      { id: 1, text: '...', done: true },
      { id: 2, text: '...', done: false }
    ]
  },
  getters: {
    doneTodos: state =&amp;gt; {
      return state.todos.filter(todo =&amp;gt; todo.done)
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mapgetters附属函数&quot;&gt;mapGetters附属函数&lt;/h3&gt;
&lt;p&gt;mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { mapGetters } from 'vuex'

export default {
  // ...
  computed: {
  // 使用对象展开运算符将 getter 混入 computed 对象中
    ...mapGetters([
      'doneTodosCount',
      'anotherGetter',
      // ...
    ])
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mapGetters({
  // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`
  doneCount: 'doneTodosCount'
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mutation&quot;&gt;Mutation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;更改 Vuex 的 store 中的状态的唯一方法是提交 mutation&lt;/li&gt;
  &lt;li&gt;mutation必须是同步函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const store = new Vuex.Store({
  state: {
    count: 1
  },
  mutations: {
    increment (state) {
      // 变更状态
      state.count++
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;store.commit('increment')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;提交payload,payload 可以使一个对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ...
mutations: {
  increment (state, n) {
    state.count += n
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;store.commit('increment', 10)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;action&quot;&gt;Action&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Action 提交的是 mutation，而不是直接变更状态&lt;/li&gt;
  &lt;li&gt;Action 可以包含任意异步操作&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;store.dispatch('increment')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;actions: {
  incrementAsync ({ commit }) {
    setTimeout(() =&amp;gt; {
      commit('increment')
    }, 1000)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;module&quot;&gt;Module&lt;/h2&gt;
&lt;p&gt;Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const moduleA = {
  state: { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
}

const moduleB = {
  state: { ... },
  mutations: { ... },
  actions: { ... }
}

const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})

store.state.a // -&amp;gt; moduleA 的状态
store.state.b // -&amp;gt; moduleB 的状态
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 20 Mar 2019 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/20/Vuex-basic-concepts/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/20/Vuex-basic-concepts/</guid>
        
        <category>Vuex</category>
        
        <category>Javascript</category>
        
        
        <category>Vue</category>
        
      </item>
    
      <item>
        <title>Dart basic concepts</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#dart的一些概念&quot; id=&quot;markdown-toc-dart的一些概念&quot;&gt;Dart的一些概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dart内置标识符&quot; id=&quot;markdown-toc-dart内置标识符&quot;&gt;Dart内置标识符&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dart函数&quot; id=&quot;markdown-toc-dart函数&quot;&gt;Dart函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#可选参数&quot; id=&quot;markdown-toc-可选参数&quot;&gt;可选参数&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#可选命名参数&quot; id=&quot;markdown-toc-可选命名参数&quot;&gt;可选命名参数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#可选位置参数&quot; id=&quot;markdown-toc-可选位置参数&quot;&gt;可选位置参数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#级联操作符&quot; id=&quot;markdown-toc-级联操作符&quot;&gt;级联操作符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dart的一些概念&quot;&gt;Dart的一些概念&lt;/h3&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;每个变量都是一个对象&lt;/li&gt;
  &lt;li&gt;Dart在运行前解析所有代码&lt;/li&gt;
  &lt;li&gt;Dart支持类和对象里的函数，可以在函数里面创建函数&lt;/li&gt;
  &lt;li&gt;支持顶级变量，以及依赖于类或对象的变量&lt;/li&gt;
  &lt;li&gt;与java 不同，Dart不具备关键字public，protected和private。如果一个标识符以下划线(_)开始，那么他和他的库都是私有的&lt;/li&gt;
  &lt;li&gt;Dart有两种运行模式：生产（production）和检查（checked）。我们建议在检查模式开发和调试，并将其部署到生产模式。&lt;/li&gt;
  &lt;li&gt;Production mode是Dart程序一个速度优化的默认运行模式。Production mode忽略断言语句和静态类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dart内置标识符&quot;&gt;Dart内置标识符&lt;/h3&gt;
&lt;p&gt;为了方便javascript向Dart的移植&lt;/p&gt;

&lt;h3 id=&quot;dart函数&quot;&gt;Dart函数&lt;/h3&gt;
&lt;p&gt;=&amp;gt; 表达式;语法是{ return 表达式 }的简写。在printNumber()方法中，这个表达式调用了顶级函数print()。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void printNumber(num number) =&amp;gt;
     print('The number is $number.');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;可选参数&quot;&gt;可选参数&lt;/h3&gt;
&lt;p&gt;可选参数可以是可选位置参数或者可选命名参数，但不能既是可选位置参数又是可选命名参数。&lt;/p&gt;

&lt;p&gt;这两种可选参数都可以定义默认值。但是默认值必须是编译时的常量，比如字面值。如果没有为之提供默认值，那么该参数的默认值将会是 null。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;可选命名参数&quot;&gt;可选命名参数&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
/// 把 bold 和 hidden 作为参数的值，并将默认值设为 false
enableFlags({bool bold: false, bool hidden: false}) {
     // ...
}

// bold 将会是 true， hidden 则是false
enableFlags(bold:true);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;可选位置参数&quot;&gt;可选位置参数&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String say(String from, String msg,
     [String device = 'carrier', String mood]) {
     var result = '$from says $msg';
     if (device != null) {
         result = '$result (in a $mood mood)';
     }
     return result;
}

assert(say('Bob', 'Howdy') == 
     'Bob says Howdy with a carrier pigeon');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;级联操作符&quot;&gt;级联操作符&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;querySelector('#button') // Get an object.
  ..text = 'Confirm'   // Use its members.
  ..classes.add('important')
  ..onClick.listen((e) =&amp;gt; window.alert('Confirmed!'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等于&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var button = querySelector('#button');
button.text = 'Confirm';
button.classes.add('important');
button.onClick.listen((e) =&amp;gt; window.alert('Confirmed!'));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 13 Mar 2019 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/13/Dart-basic-concepts/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/13/Dart-basic-concepts/</guid>
        
        <category>Dart</category>
        
        <category>Flutter</category>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>Flutter learning</title>
        <description>
&lt;p&gt;Flutter 中文网：
https://flutterchina.club/widgets-intro/&lt;/p&gt;

&lt;p&gt;Layouts in Flutter:
https://flutter.dev/docs/development/ui/layout&lt;/p&gt;

&lt;p&gt;Flutter Adding interactivity:
https://flutter.dev/docs/development/ui/interactive&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Mar 2019 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/12/flutter-study-resources/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/12/flutter-study-resources/</guid>
        
        <category>Js, Flutter]</category>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>git commands</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#git-查看远程和本地分支代码&quot; id=&quot;markdown-toc-git-查看远程和本地分支代码&quot;&gt;git 查看远程和本地分支代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#切换分支&quot; id=&quot;markdown-toc-切换分支&quot;&gt;切换分支&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#删除远程分支&quot; id=&quot;markdown-toc-删除远程分支&quot;&gt;删除远程分支&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#放弃修改&quot; id=&quot;markdown-toc-放弃修改&quot;&gt;放弃修改&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#删除untracked-file&quot; id=&quot;markdown-toc-删除untracked-file&quot;&gt;删除untracked file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#删除本地修改&quot; id=&quot;markdown-toc-删除本地修改&quot;&gt;删除本地修改&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#展示保存本地修改&quot; id=&quot;markdown-toc-展示保存本地修改&quot;&gt;展示保存本地修改&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git-add-撤销操作&quot; id=&quot;markdown-toc-git-add-撤销操作&quot;&gt;git add 撤销操作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#git-提交操作&quot; id=&quot;markdown-toc-git-提交操作&quot;&gt;git 提交操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;====================&lt;/p&gt;

&lt;p&gt;随便写写测试一下页面效果&lt;/p&gt;

&lt;p&gt;====================&lt;/p&gt;

&lt;h4 id=&quot;git-查看远程和本地分支代码&quot;&gt;git 查看远程和本地分支代码&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch -l
git branch -r
git branch -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;切换分支&quot;&gt;切换分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b 
git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;删除远程分支&quot;&gt;删除远程分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin --delete 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;放弃修改&quot;&gt;放弃修改&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态
git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。
git reset --hard HASH #返回到某个节点，不保留修改。
git reset --soft HASH #返回到某个节点。保留修改
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;删除untracked-file&quot;&gt;删除untracked file&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clean -nfd
git clean -fd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;删除本地修改&quot;&gt;删除本地修改&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset --hard
git pull

git checkout HEAD file/to/restore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;展示保存本地修改&quot;&gt;展示保存本地修改&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash
git pull
git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;git-add-撤销操作&quot;&gt;git add 撤销操作&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status 先看一下add 中的文件 
git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 
git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;git-提交操作&quot;&gt;git 提交操作&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add . 

git add xx命令可以将xx文件添加到暂存区，如果有很多改动可以通过 git add -A .来一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 git add -A表示添加所有内容， git add . 表示添加新文件和编辑过的文件不包括删除的文件; git add -u 表示添加编辑或者删除的文件，不包括新添加的文件

git commit -m &quot;提交注释&quot;

git push origin  分支名称，一般使用：git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 04 May 2018 05:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/04/git-commands/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/04/git-commands/</guid>
        
        <category>Vue</category>
        
        <category>router</category>
        
        
        <category>Git</category>
        
      </item>
    
  </channel>
</rss>
